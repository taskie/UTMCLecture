<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja">
  <head>
    <title>C#プログラミング講習会 - 10</title>
    <link rel="stylesheet" href="../common.css" type="text/css" />  
    <!--[if IE]><script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script><![endif]-->
    <script src="../jquery-1.7.2.min.js"></script>
    <script src="../common.js"></script>
  </head>
  <body>
    <nav><a href="../../index.htm">UTMC 12GW</a> &#187; <a href="../index.htm">C#プログラミング講習会</a> &#187; 10. 配列を使う (<a href="09.htm">&lt; PREV</a> NEXT &gt;)</nav>
    <h1>C#プログラミング講習会</h1>
    <h2>10. 配列を使う</h2>
    <p>同じ型の大量の変数を扱う方法として、配列というものが用意されています。</p>
    <pre class="code"><code>
using System;
class Program
{
  static void Main()
  {
    <strong>int[] xs = new int[3];</strong>

    <strong>xs[0] = 123;</strong>
    <strong>xs[1] = 456;</strong>
    <strong>xs[2] = 789;</strong>

    for (int i = 0; i &lt; 3; i++)
    {
      Console.WriteLine(<strong>xs[i]</strong>);
    }
  }
}
    </code></pre>
    <p>
      まず、<strong><code>int[] xs</code></strong> と書くことで<strong>「int 型の配列」型の変数</strong> <var>xs</var> を宣言します。
      その <var> xs </var>に<strong>「3要素のint 型配列」オブジェクト</strong>を代入しています
      （なんだか変な構文ですが慣れてください。僕は慣れていません）。
    </p>
    <p>
      こうすることで、xs[0], xs[1], xs[2]の3つの変数を使うことができるようになります。
      []の中の数字のことを<strong>インデックス</strong>（添え字）と呼びます。<strong>インデックスは0から( <var>要素数</var> -1)までの整数値を取ります。</strong>
    </p>
    <h3>foreach 文</h3>
    <p>
      上の例のように配列はfor 文と組み合わせて使われることが多いのですが、
      C#には<strong>foreach 文</strong>という構文が用意されており以下のように書くこともできます。
    </p>
    <pre class="code"><code>
using System;
class Program
{
  static void Main()
  {
    int[] xs = new int[3];

    xs[0] = 123;
    xs[1] = 456;
    xs[2] = 789;

    <strong>foreach (int x in xs)</strong>
    {
      Console.WriteLine(<strong>x</strong>);
    }
  }
}
    </code></pre>
    <p>変数 <var>x</var> には配列 <var>xs</var> の要素が次々に入ります。
    foreach 文の場合、<strong><var>x</var> に何か値を代入しても配列中の値は変更されません。</strong></p>
    <h3>フィボナッチ数列を得る</h3>
    <p>配列を使ってフィボナッチ数列を得るプログラムを書くと以下のようになります。</p>
    <pre class="code"><code>
using System;
class Program
{
  static void Main()
  {
    int[] fibonacci = new int[10];
    
    fibonacci[0] = 0;
    fibonacci[1] = 1;
    
    for (int i = 2; i &lt; <strong>fibonacci.Length</strong>; i++)
    {
      fibonacci[i] = fibonacci[i-1] + fibonacci[i-2];
    }
    
    foreach (int val in fibonacci) 
    {
      Console.WriteLine(val);
    }
  }
}
    </code></pre>
    <p>配列の<strong>Length</strong> プロパティを呼ぶと要素数（ここでは10）がわかるのでfor 文を使う時はこのようにすることをおすすめします。</p>
    <h3>演習：トリボナッチ数出力プログラム</h3>
    <p>フィボナッチ数列は「前の2項の和」で定義されますが、トリボナッチ数列（<a href="http://ja.wikipedia.org/wiki/%E3%83%95%E3%82%A3%E3%83%9C%E3%83%8A%E3%83%83%E3%83%81%E6%95%B0#.E3.83.88.E3.83.AA.E3.83.9C.E3.83.8A.E3.83.83.E3.83.81.E6.95.B0">Wikipedia</a>）は「前の3項の和」で定義されます。</p>
    <p>0, 0, 1, 1, 2, 4, 7, 13, 24, ...</p>
    <p>フィボナッチ数列のコード例を参考にし、20要素の配列 <code>tribonacci</code> を作ってトリボナッチ数列を計算しましょう。</p>
<!--
    <h3>演習：素数検出プログラム</h3>
    <p>エラトステネスの篩（<a href="http://ja.wikipedia.org/wiki/%E3%82%A8%E3%83%A9%E3%83%88%E3%82%B9%E3%83%86%E3%83%8D%E3%82%B9%E3%81%AE%E7%AF%A9">Wikipedia</a>）を利用して1000までの素数を求める素数検出プログラムを作りましょう。</p>
    <p>（ヒント）</p>
    <ul>
      <li>1001の長さを持つbool 型の配列 <code>isPrime</code> を作り（インデックスに指定した数が素数かどうかを示す）。
      全ての値を真に初期化する。</li>
      <li>0, 1は素数ではないので <code>isPrime[0]</code> と <code>isPrime[1]</code> の値は偽にしておく。</li>
      <li><code>i</code> を0から1000まで動かし、<code>isPrime[i]</code> が真なら <code>isPrime[i*n]</code> (<code>n</code> = 2 ...) の値を偽にする。</li>
      <li>最終的に <code>isPrime[x]</code> が真なら <code>x</code> は真</li>
    </ul>
-->

    <h3><a href="javascript:showKobore();">こぼれ話</a></h3>
    <div class="kobore">
    <p>配列を<code>int[] xs = { 2, 3, 5, 7, 11, 13, 17, 19 };</code>のように初期化することができます。</p>
    <p>配列型の変数に既存の配列を代入すると同じ物を指すようになります。</p>
    <pre class="code"><code>
using System;
class Program
{
  static void Main()
  {
    int[] xs = { 2, 3, 5, 7, 11, 13, 17, 19 };
    int[] ys = xs;  // ys に xs を代入
    ys[4] = 256;    // ys を 弄る
    
    foreach (int x in xs) Console.WriteLine(x);  // xs[4] も変更されている
  }
}
    </code></pre>
    <p>配列に限らず既存のオブジェクトを変数に代入すると変数は同一のオブジェクトを指すようになります。</p>
    </div>
    <nav><a href="../../index.htm">UTMC 12GW</a> &#187; <a href="../index.htm">C#プログラミング講習会</a> &#187; 10. 配列を使う (<a href="09.htm">&lt; PREV</a> NEXT &gt;)</nav>
  </body>
</html>
