<?xml version='1.0' encoding='UTF-8'?><!DOCTYPE html><html xmlns='http://www.w3.org/1999/xhtml'><head><title>1. プログラミングを始める - C#プログラミング講習会</title><link href='../common/common.css' rel='stylesheet' type='text/css'/><script src='../common/jquery-1.7.2.min.js' type='text/javascript'></script><script src='../common/common.js' type='text/javascript'></script></head><body><nav><a href='../index.htm'>C#プログラミング講習会</a> » (&lt; prev <a href='../2/index.htm'>next &gt;</a>) 1. プログラミングを始める</nav><h1 id='cプログラミング講習会'>C#プログラミング講習会</h1><h2 id='プログラミングを始める'>1. プログラミングを始める</h2><h3 id='新しいプロジェクトを作る'>新しいプロジェクトを作る</h3><p>Visual Studio でのプログラミングは<strong>プロジェクト</strong>を単位として行われます。</p><p>まずはツールバーの<strong>「新しいプロジェクト」</strong>ボタンを押しましょう。</p><div class='figure'>
<img src='new_project_toolbar.png'/><p class='caption'/>
</div><p>以下のようなウインドウが表示されるので左側のツリーで<strong>「Visual C#」</strong>の<strong>「Windows」</strong>を選択、右側のリストから<strong>「コンソール アプリケーション」</strong>を選択し、プロジェクトの<strong>「名前」</strong>を適当に決めましょう（ここでは「FirstConsoleApplication」）。</p><div class='figure'>
<img src='new_project.png'/><p class='caption'/>
</div><p>OKを押すと以下のようにプロジェクトが生成されコード（Program.cs ファイルの中身）が表示されます。</p><div class='figure'>
<img src='initial_screen.png'/><p class='caption'/>
</div><p>Program.cs ファイルになにやらごちゃごちゃと書き込まれていますが<strong>全部消して空にしてしまいましょう。</strong></p><h3 id='とりあえず丸写ししてみる'>とりあえず丸写ししてみる</h3><p>早速以下のコードを打ち込んでみましょう。 そして、<strong>Visual Studioの強力な自動補完機能（IntelliSense）の便利さを実感して下さい。</strong>例えば最初のclを入力しただけでclassという候補が選択された状態で表示されます（その状態でEnterを押すと確定され入力されます）。</p><pre class='code'><code>class Program
{
  static void Main()
  {
    System.Console.WriteLine("Hello, world!");
  }
}
</code></pre><ul><li>
<strong>大文字・小文字を間違えない</strong>（特に、Mainをmainと書かないように）
</li><li>
<strong>括弧・ダブルクォーテーションを閉じ忘れない</strong>
</li><li>
<code>System.Console.WriteLine(&quot;Hello, world!&quot;);</code>の最後の<strong>セミコロンを忘れない</strong>
</li>
</ul><p>特に<strong>セミコロン</strong>は忘れやすいので注意してください。セミコロンは<strong>文と文とを明確に区別する句点</strong>の働きをしているので忘れると動作しなくなります<span class='fs_80'>（まあ忘れてもVisual Studioが赤ペン先生の如く赤波線で教えてくれるので大丈夫ですけど）</span>。</p><h3 id='とりあえず実行してみる'>とりあえず実行してみる</h3><p><strong>メニューバーの「デバッグ」→「デバッグなしで開始」</strong>を選択（または<strong>Ctrl+F5</strong>を入力）し、 このプログラムを実際に<strong>実行</strong>してみましょう（「デバッグ開始」だと画面がすぐに消えてしまいます）。</p><div class='figure'>
<img src='run_without_debug.png'/><p class='caption'/>
</div><p>うまく行けば、次のような画面（<strong>コンソール画面</strong>）が表示されます。</p><div class='figure'>
<img src='hello_world.png'/><p class='caption'/>
</div><p><strong><ruby><span class='fs_150'>Congratulation!</span><rp>（</rp><rt>コングラッチュレーション</rt><rp>）</rp>　<span class='fs_150'>Congratulation!</span><rp>（</rp><rt>コングラッチュレーション</rt><rp>）</rp></ruby></strong><br/>おめでとう……！　おめでとう……！　実行おめでとう……！</p><p>コードの意味はよく分からないけれど、とりあえず実行させることはできたはずです。できていない場合は、もう一度上のコードと比較してみて下さい。</p><h3 id='で結局このコードは何をやっているのか'>で、結局このコードは何をやっているのか</h3><p>さて、このコードで最も重要なのは<strong><code>System.Console.WriteLine(&quot;Hello, world!&quot;);</code></strong>の部分です。 逆に言うと、他の部分は現時点で全く気にする必要が無く、<strong>「なんたらMainの直後の中括弧の内側に Hello, world! を表示させるコードがあるな」</strong>という認識で良いです。 問題のSystem.Console.WriteLineですが、英語の部分は適当に助詞を補って逐語訳すれば意味は大体理解できるはずです。<strong>「システム (System) のコンソール (Console) に1行 (Line) 書け (Write)」</strong>という感じになるんじゃないですか（適当）。</p><p>「書け」なんて命令するからには何を書かせたいのか教える必要があるので、その後の丸括弧の中には書かせたい文字列を入れておきます。<strong>文字列はダブルクオーテーションで囲む必要があります（重要）。</strong>囲まないとそれが文字列だとコンピュータが判断できないのです。</p><p>2つの文字列を表示させたければ、単純に以下のようにすればOKです。</p><pre class='code'><code>class Program
{
  static void Main()
  {
    System.Console.WriteLine("A");
    System.Console.WriteLine("B");
  }
}
</code></pre><p>ちなみに、System.Console.WriteLineをもっと速く入力する方法があります。<strong><kbd>cw</kbd></strong>と打ってTabキーを2回押してみましょう。</p><h3 id='無視されるもの'>無視されるもの</h3><p>空白文字（半角スペース・タブ・改行）はプログラムの実行に影響を与えない物として無視されるので、例えば以下のように書いても実行されます。</p><pre class='code'><code>class Program{

  static void Main() {
System.Console.WriteLine("A");System.Console.WriteLine("B");
}}
</code></pre><p>これは極端な例で、こんな風に書いてもただ読み辛いだけなのできちんとインデントして書きましょう。 また、意味のある語句（System, Console, WriteLineなどの単語、&quot;Hello, world!&quot;などの文字列）の途中で改行するとエラーになります。</p><h3 id='コメント'>コメント</h3><p><strong><code>//</code>から行末まで</strong>と<strong><code>/* ～ */</code>で囲まれた部分</strong>は無視されます（<strong>コメント</strong>と呼びます）。</p><pre class='code'><code>class Program
{
  static void Main()
  {
    // System.Console.WriteLine("A");
    System.Console.WriteLine("B");
    /*
    System.Console.WriteLine("C");
    System.Console.WriteLine("D");
    */
  }
}
</code></pre><p>コメントはその名の通りコードの意味についてコメントしたり、一時的にコードを実行しないようにしたりする為に使われます。</p><h3 id='演習自己紹介プログラム'>演習：自己紹介プログラム</h3><p>System.Console.WriteLineを使ってコンソール画面に自分の名前を表示させてみましょう。</p><nav><a href='../index.htm'>C#プログラミング講習会</a> » (&lt; prev <a href='../2/index.htm'>next &gt;</a>) 1. プログラミングを始める</nav></body></html>
